# ===============================================
# ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
# ===============================================

# ‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô GitHub
name: Web Test Auto Run

# ===============================================
# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
# ===============================================
on:
  # ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ push code ‡πÑ‡∏õ‡∏ó‡∏µ‡πà branch main
  push:
    branches: [ main ]
  
  # ‡∏£‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏±‡∏ô‡πÄ‡∏≠‡∏á‡πÉ‡∏ô GitHub
  workflow_dispatch:

# ===============================================
# ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏≥
# ===============================================
jobs:
  # ‡∏ä‡∏∑‡πà‡∏≠‡∏á‡∏≤‡∏ô: test-web
  test-web:
    # ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå Ubuntu (Linux) ‡∏Ç‡∏≠‡∏á GitHub
    runs-on: ubuntu-latest
    
    # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    steps:
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏î‡∏∂‡∏á code ‡∏à‡∏≤‡∏Å GitHub
      - name: ‡∏î‡∏∂‡∏á code ‡∏°‡∏≤
        uses: actions/checkout@v4
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python
      - name: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12.4'
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Robot Framework
      - name: ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Robot Framework
        run: |
          pip install -r requirements.txt
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: ‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™
      - name: ‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™ Web
        run: |
          # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏•
          mkdir -p results
          
          # ‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™‡∏ï‡∏£‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏ü‡∏•‡πå FlowLogin.robot
          robot --outputdir results TestScript/Web/Staging/FlowLogin.robot || true
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: ‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™
      - name: üß™ Run Robot Framework Tests
        id: robot-test
        run: |
          mkdir -p results
          
          # ‡∏£‡∏±‡∏ô‡πÄ‡∏ó‡∏™‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö exit code
          robot \
            --variable BROWSER:headlesschrome \
            --outputdir results \
            --output output.xml \
            --log log.html \
            --report report.html \
            TestScript/ || ROBOT_EXIT_CODE=$?
          
          # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏£‡∏±‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          if [ ${ROBOT_EXIT_CODE:-0} -eq 0 ]; then
            echo "‚úÖ All tests passed!"
            echo "test_status=success" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Some tests failed!"
            echo "test_status=failure" >> $GITHUB_OUTPUT
          fi
          
          # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏£‡∏∏‡∏õ
          echo "========================================="
          echo "üìä TEST EXECUTION SUMMARY"
          echo "========================================="
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 6: ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
      - name: üìä Analyze Test Results
        if: always()
        run: |
          # ‡∏™‡∏£‡πâ‡∏≤‡∏á Python script ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•
          cat > analyze_results.py << 'EOF'
          import xml.etree.ElementTree as ET
          import os
          import sys
          
          # ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå output.xml
          xml_file = 'results/output.xml'
          if not os.path.exists(xml_file):
              print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö")
              sys.exit(1)
          
          tree = ET.parse(xml_file)
          root = tree.getroot()
          
          # ‡∏´‡∏≤‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
          stats = root.find('.//statistics/total/stat')
          if stats is not None:
              passed = int(stats.get('pass', 0))
              failed = int(stats.get('fail', 0))
              skipped = int(stats.get('skip', 0))
              total = passed + failed + skipped
              
              # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå
              pass_rate = (passed / total * 100) if total > 0 else 0
              
              # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ö‡∏ö‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
              print("\n" + "="*50)
              print("üìä TEST RESULTS SUMMARY")
              print("="*50)
              print(f"‚úÖ Passed:  {passed:3d} tests")
              print(f"‚ùå Failed:  {failed:3d} tests")
              print(f"‚è≠Ô∏è  Skipped: {skipped:3d} tests")
              print("-"*50)
              print(f"üìä Total:   {total:3d} tests")
              print(f"üìà Pass Rate: {pass_rate:.1f}%")
              print("="*50)
              
              # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ emoji
              if pass_rate == 100:
                  status = "üéâ PERFECT! All tests passed!"
              elif pass_rate >= 80:
                  status = "‚úÖ GOOD: Most tests passed"
              elif pass_rate >= 60:
                  status = "‚ö†Ô∏è WARNING: Some tests failed"
              else:
                  status = "‚ùå CRITICAL: Many tests failed"
              
              print(f"\n{status}\n")
              
              # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ test ‡∏ó‡∏µ‡πà fail (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
              if failed > 0:
                  print("\n‚ùå FAILED TESTS:")
                  print("-"*50)
                  for test in root.findall('.//test[@status="FAIL"]'):
                      name = test.get('name', 'Unknown')
                      print(f"  ‚ùå {name}")
                      # ‡πÅ‡∏™‡∏î‡∏á error message ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
                      msg = test.find('.//msg[@level="FAIL"]')
                      if msg is not None and msg.text:
                          error_text = msg.text[:100] + "..." if len(msg.text) > 100 else msg.text
                          print(f"     Error: {error_text}")
              
              # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå summary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'a') as f:
                  f.write("# ü§ñ Robot Framework Test Results\n\n")
                  f.write("## üìä Summary\n\n")
                  f.write("| Metric | Count | Percentage |\n")
                  f.write("|--------|-------|------------|\n")
                  f.write(f"| ‚úÖ **Passed** | **{passed}** | {(passed/total*100):.1f}% |\n")
                  f.write(f"| ‚ùå **Failed** | **{failed}** | {(failed/total*100):.1f}% |\n")
                  f.write(f"| ‚è≠Ô∏è **Skipped** | **{skipped}** | {(skipped/total*100):.1f}% |\n")
                  f.write(f"| üìä **Total** | **{total}** | 100% |\n\n")
                  
                  # Badge
                  color = 'green' if pass_rate >= 80 else 'yellow' if pass_rate >= 60 else 'red'
                  f.write(f"![Pass Rate](https://img.shields.io/badge/Pass%20Rate-{pass_rate:.1f}%25-{color})\n\n")
                  
                  if failed > 0:
                      f.write("## ‚ùå Failed Tests\n\n")
                      for test in root.findall('.//test[@status="FAIL"]'):
                          name = test.get('name', 'Unknown')
                          f.write(f"- {name}\n")
          
          # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô environment variable
          print(f"::set-output name=total_tests::{total}")
          print(f"::set-output name=passed_tests::{passed}")
          print(f"::set-output name=failed_tests::{failed}")
          print(f"::set-output name=pass_rate::{pass_rate:.1f}")
          EOF
          
          # ‡∏£‡∏±‡∏ô script
          python analyze_results.py
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 7: ‡∏™‡∏£‡πâ‡∏≤‡∏á Test Report Badge
      - name: üè∑Ô∏è Create Test Badge
        if: always()
        run: |
          # ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏à‡∏≤‡∏Å output.xml ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á badge
          python << 'EOF'
          import xml.etree.ElementTree as ET
          import json
          
          try:
              tree = ET.parse('results/output.xml')
              root = tree.getroot()
              stats = root.find('.//statistics/total/stat')
              
              if stats:
                  passed = int(stats.get('pass', 0))
                  failed = int(stats.get('fail', 0))
                  total = passed + failed
                  
                  # ‡∏™‡∏£‡πâ‡∏≤‡∏á badge data
                  badge_data = {
                      "schemaVersion": 1,
                      "label": "Tests",
                      "message": f"{passed}/{total} passed",
                      "color": "green" if failed == 0 else "yellow" if failed <= 2 else "red"
                  }
                  
                  # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå
                  with open('results/badge.json', 'w') as f:
                      json.dump(badge_data, f)
                  
                  print(f"üìä Badge created: {passed}/{total} tests passed")
          except:
              print("‚ö†Ô∏è Could not create badge")
          EOF
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 8: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô Job Summary
      - name: üìù Update Job Summary
        if: always()
        run: |
          echo "## üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- üìä [Download Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- üìù [View Workflow File](https://github.com/${{ github.repository }}/blob/${{ github.sha }}/.github/workflows/web-test-simple.yml)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 9: Upload Artifacts
      - name: üìÅ Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ github.run_number }}
          path: |
            results/
          retention-days: 30
      
      # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 10: Comment on Commit (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô push)
      - name: üí¨ Comment Test Results
        if: always() && github.event_name == 'push'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // ‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏à‡∏≤‡∏Å summary
            let comment = '## ü§ñ Robot Framework Test Results\n\n';
            
            try {
              // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•
              const xml = fs.readFileSync('results/output.xml', 'utf8');
              
              // ‡∏´‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô pass/fail ‡∏à‡∏≤‡∏Å XML (‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢)
              const passMatch = xml.match(/pass="(\d+)"/);
              const failMatch = xml.match(/fail="(\d+)"/);
              
              if (passMatch && failMatch) {
                const passed = parseInt(passMatch[1]);
                const failed = parseInt(failMatch[1]);
                const total = passed + failed;
                const passRate = total > 0 ? ((passed / total) * 100).toFixed(1) : 0;
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á emoji ‡∏ï‡∏≤‡∏°‡∏ú‡∏•
                const statusEmoji = failed === 0 ? '‚úÖ' : '‚ùå';
                const status = failed === 0 ? 'All tests passed!' : `${failed} test(s) failed`;
                
                comment += `${statusEmoji} **Status:** ${status}\n\n`;
                comment += `üìä **Results:** ${passed}/${total} tests passed (${passRate}%)\n\n`;
                
                // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
                const progressBar = '‚ñà'.repeat(Math.floor(passRate/10)) + '‚ñë'.repeat(10 - Math.floor(passRate/10));
                comment += `**Pass Rate:** [${progressBar}] ${passRate}%\n\n`;
                
                comment += `üîó [View Full Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`;
              }
            } catch (e) {
              comment += '‚ö†Ô∏è Could not parse test results\n';
            }
            
            // Comment on commit
            try {
              await github.rest.repos.createCommitComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                commit_sha: context.sha,
                body: comment
              });
            } catch (e) {
              console.log('Could not create commit comment:', e.message);
            }