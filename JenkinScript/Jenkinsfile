pipeline {
    agent any
    
    // Parameters สำหรับความยืดหยุ่นในการรัน
    parameters {
        choice(name: 'TEST_SUITE', 
               choices: ['all', 'api', 'web', 'mobile'], 
               description: 'เลือก test suite ที่จะรัน')
        string(name: 'BROWSER', 
               defaultValue: 'chrome', 
               description: 'Browser สำหรับ web tests (chrome, firefox, edge)')
        booleanParam(name: 'SKIP_MOBILE', 
                     defaultValue: false, 
                     description: 'ข้าม mobile tests หากไม่มี Appium server')
        booleanParam(name: 'PARALLEL_EXECUTION', 
                     defaultValue: false, 
                     description: 'รัน tests แบบ parallel')
    }
    
    // ตัวแปร Environment สำหรับการรัน Pipeline
    environment {
        ROBOT_OPTIONS = '--outputdir results --loglevel INFO --timestampoutputs'
        APPIUM_SERVER = 'http://localhost:4723/wd/hub'
        PYTHON_PATH = 'python'
        BUILD_TIMESTAMP = "${new Date().format('yyyy-MM-dd_HH-mm-ss')}"
    }
    
    // ตั้งค่าการ Build และ Options ต่างๆ
    options {
        timeout(time: 30, unit: 'MINUTES')
        skipDefaultCheckout(false)
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timestamps()
    }
    
    stages {
        // Stage 1: ดึงโค้ดจาก Git Repository
        stage('Checkout Code From Git') {
            steps {
                echo '🔄 กำลังดึงโค้ดจาก Git repository...'
                
                git branch: 'main',
                    url: 'https://github.com/kaakom100/TTB-Automation-Assignment'
                    
                script {
                    def commitInfo = bat(script: 'git log -1 --pretty=format:"%h - %an: %s"', returnStdout: true).trim()
                    echo "📝 Commit ล่าสุด: ${commitInfo}"
                }
            }
        }
        
        // Stage 2: ตั้งค่า Environment และตรวจสอบระบบ
        stage('Environment Setup') {
            steps {
                echo '⚙️ กำลังตั้งค่า Python environment...'
                script {
                    try {
                        // ตรวจสอบเวอร์ชัน Python
                        bat 'python --version'
                        echo '✅ Python พร้อมใช้งาน'
                        
                        // สร้างโฟลเดอร์ results พร้อม subdirectories
                        bat '''
                            if not exist "results" mkdir results
                            if not exist "results\\api" mkdir results\\api
                            if not exist "results\\web" mkdir results\\web
                            if not exist "results\\mobile" mkdir results\\mobile
                            if not exist "results\\merged" mkdir results\\merged
                            if not exist "results\\screenshots" mkdir results\\screenshots
                        '''
                        echo '📁 สร้างโครงสร้างโฟลเดอร์เรียบร้อย'
                        
                        // อัพเกรด pip
                        bat 'python -m pip install --upgrade pip'
                        echo '⬆️ อัพเกรด pip เรียบร้อย'
                        
                    } catch (Exception e) {
                        error "❌ การตั้งค่า environment ล้มเหลว: ${e.getMessage()}"
                    }
                }
            }
        }
        
        // Stage 3: ติดตั้ง Dependencies
        stage('Install Dependencies') {
            steps {
                echo '📦 กำลังติดตั้ง Python dependencies...'
                script {
                    try {
                        bat 'pip install -r JenkinScript/requirements.txt'
                        echo '✅ ติดตั้ง dependencies เรียบร้อย'
                        
                        echo '📋 รายการ Robot Framework packages:'
                        bat 'pip list | findstr robot'
                        
                    } catch (Exception e) {
                        error "❌ การติดตั้ง dependencies ล้มเหลว: ${e.getMessage()}"
                    }
                }
            }
        }
        
        // Stage 4: ตรวจสอบ Test Files และ Environment
        stage('Pre-Test Validation') {
            steps {
                echo '🔍 กำลังตรวจสอบ test environment...'
                script {
                    try {
                        // ตรวจสอบ configuration files
                        def configFiles = [
                            'Configuration\\Configs_Run_Test_Global.yml',
                            'Configuration\\Configs_Timeout.yml',
                            'Resource\\KeyRepositories.yml'
                        ]
                        
                        configFiles.each { file ->
                            if (bat(script: "if exist \"${file}\" (exit 0) else (exit 1)", returnStatus: true) != 0) {
                                error "❌ ไม่พบไฟล์: ${file}"
                            }
                        }
                        echo '✅ ไฟล์ configuration ครบถ้วน'
                        
                        // ตรวจสอบ test files
                        def testSuites = ['API', 'Web', 'Mobile']
                        testSuites.each { suite ->
                            def count = bat(
                                script: "dir /b TestScript\\${suite}\\*.robot 2>nul | find /c \".robot\"",
                                returnStdout: true
                            ).trim()
                            echo "📊 พบ ${count} test files ใน ${suite} suite"
                        }
                        
                        echo '🎯 การตรวจสอบ environment เสร็จสมบูรณ์'
                        
                    } catch (Exception e) {
                        error "❌ การตรวจสอบก่อนรัน test ล้มเหลว: ${e.getMessage()}"
                    }
                }
            }
        }
        
        // Stage 5: รัน Tests (Sequential หรือ Parallel)
        stage('Execute Tests') {
            when {
                expression { params.PARALLEL_EXECUTION == false }
            }
            steps {
                script {
                    // รัน API Tests
                    if (params.TEST_SUITE in ['all', 'api']) {
                        runApiTests()
                    }
                    
                    // รัน Web Tests
                    if (params.TEST_SUITE in ['all', 'web']) {
                        runWebTests()
                    }
                    
                    // รัน Mobile Tests
                    if (params.TEST_SUITE in ['all', 'mobile'] && !params.SKIP_MOBILE) {
                        runMobileTests()
                    }
                }
            }
        }
        
        // Stage 5 Alternative: Parallel Execution
        stage('Execute Tests in Parallel') {
            when {
                expression { params.PARALLEL_EXECUTION == true }
            }
            parallel {
                stage('API Tests') {
                    when {
                        expression { params.TEST_SUITE in ['all', 'api'] }
                    }
                    steps {
                        script { runApiTests() }
                    }
                }
                
                stage('Web Tests') {
                    when {
                        expression { params.TEST_SUITE in ['all', 'web'] }
                    }
                    steps {
                        script { runWebTests() }
                    }
                }
                
                stage('Mobile Tests') {
                    when {
                        expression { 
                            params.TEST_SUITE in ['all', 'mobile'] && 
                            !params.SKIP_MOBILE 
                        }
                    }
                    steps {
                        script { runMobileTests() }
                    }
                }
            }
        }
        
        // Stage 6: รวมผลลัพธ์จากทุก Test Suite
        stage('Merge Test Results') {
            steps {
                echo '🔗 กำลังรวมผลลัพธ์จากทุก test suite...'
                script {
                    try {
                        def outputFiles = []
                        
                        // ตรวจสอบว่ามี output files อะไรบ้าง
                        ['api', 'web', 'mobile'].each { suite ->
                            if (fileExists("results/${suite}/output.xml")) {
                                outputFiles.add("results/${suite}/output.xml")
                                echo "✅ พบผลลัพธ์ ${suite.toUpperCase()} tests"
                            }
                        }
                        
                        // รวมผลลัพธ์ถ้ามีมากกว่า 1 ไฟล์
                        if (outputFiles.size() > 1) {
                            def files = outputFiles.join(' ')
                            bat """
                                rebot --outputdir results/merged ^
                                      --name "Complete_Test_Suite" ^
                                      --reporttitle "Test Report - Build #${BUILD_NUMBER}" ^
                                      --logtitle "Test Log - ${BUILD_TIMESTAMP}" ^
                                      ${files}
                            """
                            echo '✅ รวมผลลัพธ์เรียบร้อย'
                        } else if (outputFiles.size() == 1) {
                            echo '📌 มีผลลัพธ์เพียง 1 suite ไม่จำเป็นต้องรวม'
                        } else {
                            echo '⚠️ ไม่พบผลลัพธ์ test ใดๆ'
                        }
                        
                    } catch (Exception e) {
                        echo "⚠️ การรวมผลลัพธ์มีปัญหา: ${e.getMessage()}"
                    }
                }
            }
        }
        
        // Stage 7: เผยแพร่ผลลัพธ์และ Reports
        stage('Publish Test Results') {
            steps {
                echo '📊 กำลังเผยแพร่ test results และ reports...'
                script {
                    try {
                        // Archive artifacts
                        echo '📁 กำลัง archive artifacts...'
                        archiveArtifacts artifacts: '''
                            results/**/*.xml,
                            results/**/*.html,
                            results/**/*.png,
                            results/**/*.jpg,
                            results/**/*.log
                        ''', allowEmptyArchive: true, fingerprint: true
                        
                        // Publish HTML Reports
                        echo '📄 กำลังเผยแพร่ HTML reports...'
                        
                        // ถ้ามี merged report ให้ใช้ merged report
                        def reportDir = fileExists('results/merged/report.html') ? 'results/merged' : 'results'
                        
                        publishHTML([
                            allowMissing: false,
                            alwaysLinkToLastBuild: true,
                            keepAll: true,
                            reportDir: reportDir,
                            reportFiles: '**/report.html',
                            reportName: 'Robot Framework Test Report',
                            reportTitles: 'รายงานผลการทดสอบ'
                        ])
                        
                        // Robot Framework Plugin
                        try {
                            echo '🤖 กำลังใช้ Robot Framework plugin...'
                            robot outputPath: reportDir,
                                  reportFileName: 'report.html',
                                  logFileName: 'log.html',
                                  passThreshold: 80.0,
                                  unstableThreshold: 70.0,
                                  criticalFailedThreshold: 90.0,
                                  otherFiles: '**/*.png,**/*.jpg'
                        } catch (Exception robotPluginError) {
                            echo "⚠️ Robot Framework plugin ไม่พร้อมใช้งาน: ${robotPluginError.getMessage()}"
                        }
                        
                        echo '✅ เผยแพร่ผลลัพธ์เรียบร้อย'
                        
                    } catch (Exception e) {
                        echo "⚠️ การเผยแพร่ผลลัพธ์บางส่วนล้มเหลว: ${e.getMessage()}"
                    }
                }
            }
        }
        
        // Stage 8: สร้างสรุปผลการทดสอบ
        stage('Test Summary') {
            steps {
                echo '📋 กำลังสร้างสรุปผลการทดสอบ...'
                script {
                    try {
                        // สร้าง summary report
                        def summaryContent = """
=====================================
        สรุปผลการทดสอบ
=====================================
Build Number: ${BUILD_NUMBER}
Build URL: ${BUILD_URL}
Test Suite: ${params.TEST_SUITE}
Browser: ${params.BROWSER}
Parallel Execution: ${params.PARALLEL_EXECUTION}
Skip Mobile: ${params.SKIP_MOBILE}
เวลาที่รัน: ${BUILD_TIMESTAMP}
Jenkins Node: ${NODE_NAME ?: 'N/A'}
=====================================
"""
                        writeFile file: 'results/summary.txt', text: summaryContent
                        
                        // แสดง summary
                        echo "📊 สรุปผลการทดสอบ:\n${summaryContent}"
                        
                        // นับจำนวน test cases
                        ['api', 'web', 'mobile'].each { suite ->
                            if (fileExists("results/${suite}/output.xml")) {
                                echo "📈 ตรวจสอบผลลัพธ์ ${suite.toUpperCase()} tests..."
                            }
                        }
                        
                    } catch (Exception e) {
                        echo "⚠️ การสร้างสรุปผลล้มเหลว: ${e.getMessage()}"
                    }
                }
            }
        }
    }
    
    // Post Actions
    post {
        always {
            echo '🏁 Pipeline execution เสร็จสิ้น'
            
            script {
                try {
                    echo '🧹 กำลังทำความสะอาดไฟล์ชั่วคราว...'
                    bat '''
                        if exist "selenium-screenshot-*.png" del selenium-screenshot-*.png
                        if exist "*.log" del *.log
                        if exist "geckodriver.log" del geckodriver.log
                    '''
                    echo '✅ ทำความสะอาดเรียบร้อย'
                } catch (Exception e) {
                    echo "⚠️ การทำความสะอาด: ${e.getMessage()}"
                }
            }
        }
        
        success {
            echo '🎉 Pipeline เสร็จสมบูรณ์เรียบร้อย!'
            echo '✅ ทุก tests ทำงานได้ถูกต้องและ results ถูกเผยแพร่แล้ว'
            
            // ส่ง notification (ถ้าต้องการ)
            script {
                def duration = currentBuild.durationString.replace(' and counting', '')
                echo "⏱️ ใช้เวลาทั้งหมด: ${duration}"
            }
        }
        
        unstable {
            echo '⚠️ Pipeline เสร็จสิ้นแต่มี test failures'
            echo '📊 บาง tests ล้มเหลว กรุณาตรวจสอบ report'
        }
        
        failure {
            echo '❌ Pipeline ล้มเหลว!'
            echo '🔍 กรุณาตรวจสอบ console output เพื่อดูรายละเอียด'
        }
        
        cleanup {
            echo '🧹 กำลังทำความสะอาด workspace...'
            // เก็บเฉพาะ results ไว้
            /*
            cleanWs(
                cleanWhenNotBuilt: false,
                deleteDirs: true,
                disableDeferredWipeout: true,
                notFailBuild: true,
                patterns: [[pattern: 'results/**', type: 'EXCLUDE']]
            )
            */
        }
    }
}

// ==================== Helper Functions ====================

def runApiTests() {
    echo '🌐 กำลังรัน API tests...'
    try {
        // ตรวจสอบว่ามี test files หรือไม่
        def testCount = bat(
            script: 'dir /b TestScript\\API\\*.robot 2>nul | find /c ".robot"',
            returnStdout: true
        ).trim()
        
        if (testCount == "0") {
            echo '⚠️ ไม่พบ API test files - ข้าม'
            return
        }
        
        echo "📊 พบ ${testCount} API test files"
        
        // รัน tests
        def result = bat(
            script: 'robot --include api --outputdir results/api --name "API_Tests" TestScript/API/*.robot',
            returnStatus: true
        )
        
        // จัดการผลลัพธ์
        handleTestResult(result, 'API')
        
    } catch (Exception e) {
        echo "⚠️ API tests มีปัญหา: ${e.getMessage()}"
        currentBuild.result = 'UNSTABLE'
    }
}

def runWebTests() {
    echo '🖥️ กำลังรัน Web automation tests...'
    try {
        // ตรวจสอบว่ามี test files หรือไม่
        def testCount = bat(
            script: 'dir /b TestScript\\Web\\*.robot 2>nul | find /c ".robot"',
            returnStdout: true
        ).trim()
        
        if (testCount == "0") {
            echo '⚠️ ไม่พบ Web test files - ข้าม'
            return
        }
        
        echo "📊 พบ ${testCount} Web test files"
        
        // รัน tests พร้อม browser parameter
        def browser = params.BROWSER ?: 'chrome'
        def result = bat(
            script: """robot --variable BROWSER:${browser} ^
                            --outputdir results/web ^
                            --name "Web_Tests" ^
                            TestScript/Web/*.robot""",
            returnStatus: true
        )
        
        // จัดการผลลัพธ์
        handleTestResult(result, 'Web')
        
    } catch (Exception e) {
        echo "⚠️ Web tests มีปัญหา: ${e.getMessage()}"
        currentBuild.result = 'UNSTABLE'
    }
}

def runMobileTests() {
    echo '📱 กำลังตรวจสอบ Appium server...'
    
    // ตรวจสอบ Appium server
    def appiumReady = bat(
        script: 'curl -s http://localhost:4723/wd/hub/status',
        returnStatus: true
    ) == 0
    
    if (!appiumReady) {
        echo '⚠️ Appium server ไม่พร้อม - ข้าม Mobile tests'
        return
    }
    
    echo '✅ Appium server พร้อมใช้งาน'
    echo '📱 กำลังรัน Mobile automation tests...'
    
    try {
        // ตรวจสอบว่ามี test files หรือไม่
        def testCount = bat(
            script: 'dir /b TestScript\\Mobile\\*.robot 2>nul | find /c ".robot"',
            returnStdout: true
        ).trim()
        
        if (testCount == "0") {
            echo '⚠️ ไม่พบ Mobile test files - ข้าม'
            return
        }
        
        echo "📊 พบ ${testCount} Mobile test files"
        
        // รัน tests
        def result = bat(
            script: 'robot --outputdir results/mobile --name "Mobile_Tests" TestScript/Mobile/*.robot',
            returnStatus: true
        )
        
        // จัดการผลลัพธ์
        handleTestResult(result, 'Mobile')
        
    } catch (Exception e) {
        echo "⚠️ Mobile tests มีปัญหา: ${e.getMessage()}"
        currentBuild.result = 'UNSTABLE'
    }
}

def handleTestResult(exitCode, testType) {
    switch(exitCode) {
        case 0:
            echo "✅ ${testType} tests ผ่านทั้งหมด"
            break
        case 1:
            echo "⚠️ ${testType} tests บางส่วนล้มเหลว"
            currentBuild.result = 'UNSTABLE'
            break
        case [250..255]:
            error "💥 ${testType} tests มีข้อผิดพลาดร้ายแรง (exit code: ${exitCode})"
            break
        default:
            echo "⚠️ ${testType} tests จบด้วย exit code: ${exitCode}"
            currentBuild.result = 'UNSTABLE'
    }
}